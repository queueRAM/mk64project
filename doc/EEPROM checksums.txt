MK64 EEPROM Notes
by queueRAM
2016
______________________________________________________

EEPROM_BASE 8018EB90

------------------------
Course records checksums
------------------------

Each record contains a 1-byte checksum at offset 0x17 and is computed as follows:
unsigned char RecordChecksum(unsigned char data[], int offset)
{
  int checksum = 0;
  for (int rec = 0; rec < 7; rec++) {
     for (int i = 0; i < 3; i++) {
        unsigned char val = data[offset + rec * 3 + i];
        checksum += (val * (i + 1)) + rec;
     }
  }
  return (unsigned char)(checksum & 0xFF);
}

proc_800B4874:
  lui   $t4, 0x8019                t4 = EEPROM_BASE
  addiu $t4, $t4, -0x1470          
  move  $v1, $zero                 v1 = 0                       cksum = 0
  move  $a1, $zero                 a1 = 0                       cur_rec = 0
                                   t6 = a0 >> 2                 gp = a0 / 4
  bgez  $a0, .Lproc_800B4874_20    if (a0 < 0) {
  sra   $t6, $a0, 2                
  addiu $at, $a0, 3                  at = a0 + 3
  sra   $t6, $at, 2                  t6 = at >> 2
.Lproc_800B4874_20:                }
  sll   $t7, $t6, 2                t7 = t6 << 2                 //
  subu  $t7, $t7, $t6              t7 -= t6                     //
  sll   $t7, $t7, 5                t7 <<= 5                     gp_off = gp * 3 * 32
  bgez  $a0, .Lproc_800B4874_40    
  andi  $t8, $a0, 3                t8 = a0 & 0x3                track_off = a0 & 0x3
  beqz  $t8, .Lproc_800B4874_40    if (a0 < 0 || t8 != 0) {
  nop                              
  addiu $t8, $t8, -4                 t8 -= 4
.Lproc_800B4874_40:                }
  sll   $t9, $t8, 2                t9 = t8 << 2                 //
  subu  $t9, $t9, $t8              t9 -= t8                     //
  sll   $t9, $t9, 3                t9 <<= 3                     //
  addu  $t3, $t7, $t9              t3 = t7 + t9                 //
  addu  $v0, $t3, $t4              v0 = t3 + t4                 v0 = gp_off + track_off * 24 + EEPROM_BASE
  move  $a2, $zero                 a2 = 0                       off = 0
  addiu $t2, $zero, 7              t2 = 7                       records = 7
  addiu $t1, $zero, 3              t1 = 3                       bytes = 3
.Lproc_800B4874_60:                do {                         do {
  move  $a0, $zero                   a0 = 0                       byte_off = 0
  addu  $t0, $v0, $a2                t0 = v0 + a2                 cur_off = v0 + off
.Lproc_800B4874_68:                  do {                         do {
  addu  $t5, $t0, $a0                  t5 = t0 + a0                 //
  lbu   $t6, ($t5)                     t6 = *t5                     t6 = t0[cur_off + byte_off]
  addiu $a3, $a0, 1                    a3 = a0 + 1                  //
  move  $a0, $a3                       a0 = a3                      byte_off++
  multu $t6, $a3                       //                           //
  mflo  $t8                            t8 = t6 * a3                 //
  addu  $t7, $v1, $t8                  t7 = v1 + t8                 //
  bne   $a3, $t1, .Lproc_800B4874_68   v1 = t7 + a1                 cksum = cksum + (t6 * byte_off) + cur_rec
  addu  $v1, $t7, $a1                } while (a3 != t1)           } while (a0 != t1)
  addiu $a1, $a1, 1                  a1++                         cur_rec++
  bne   $a1, $t2, .Lproc_800B4874_60 a2 += 3                      off += 3
  addiu $a2, $a2, 3                } while (a1 != t2)           } while (cur_rec != records)
  bgez  $v1, .Lproc_800B4874_AC
  andi  $v0, $v1, 0xff             v0 = v1 & 0xFF               v0 = cksum & 0xFF
  beqz  $v0, .Lproc_800B4874_AC    if (v1 < 0 || v0 != 0) {
  nop   
  addiu $v0, $v0, -0x100             v0 -= 0x100
.Lproc_800B4874_AC:                }
  andi  $t9, $v0, 0xff             t9 = v0 & 0xFF
  jr    $ra
  move  $v0, $t9                   v0 = t9
# end proc_800B4874

proc_800B45E0:
/* 0B524C 800B464C A0C20017 */  sb    $v0, 0x17($a2)

------------------------
Course records 0x14-0x16
------------------------

800D4234
800B48E0


------------
0x186-0x187
------------
0x186 is a checksum of offsets 0x180-0x184 and is computed by procedure at 800B492C and 0x187 is computed by procedure at 800B49E4

EEPROM[0x186] = (EEPROM[0x180] + 1 + 
                 ((EEPROM[0x181] + 1) * 2) + 1 + 
                 ((EEPROM[0x182] + 1) * 3) + 2 + 
                 ((EEPROM[0x183] + 1) * 4) + 3 + 
                 ((EEPROM[0x184] + 1) * 5) + 4) & 0xFF
EEPROM[0x187] = (EEPROM[0x186] + 0x5A) & 0xFF

Example:
0x180: 13 80 08 00 03 00 53 AD
EEPROM[0x186] = (0x13 + 1 + ((0x80 + 1) * 2) + 1 + ((0x08 + 1) * 3) + 2 + 
                 ((0x00 + 1) * 4) + 3 + ((0x03 + 1) * 5) + 4) & 0xFF

computes byte checksum stores in v0
v0 stored to 8018ED16 (EEPROM 0x186)

proc_800B492C:
  lui   $t6, 0x8019         t6 = 0x8018ED10 (EEPROM 0x180)
  addiu $v0, $zero, 1       v0 = 1
  addiu $t6, $t6, -0x12f0
  addu  $a0, $v0, $t6       a0 = v0 + t6                       a0 = EEPROM_BASE + 0x181
  lbu   $t7, ($a0)          t7 = *a0
  addiu $t9, $v0, 1         t9 = v0 + 1
  lbu   $t2, 1($a0)         t2 = *(a0 + 1)
  addiu $t8, $t7, 1         t8 = t7 + 1
  multu $t8, $t9            tmp = t8 * t9                      mult1 = (a0[0] + 1) * 2
  addiu $t4, $v0, 2         t4 = v0 + 2
  addiu $t3, $t2, 1         t3 = t2 + 1
  lbu   $t7, 2($a0)         t7 = *(a0 + 2)
  addiu $t9, $v0, 3         t9 = v0 + 3
  lui   $v1, 0x8019
  addiu $t8, $t7, 1         t8 = t7 + 1
  lbu   $v1, -0x12f0($v1)   v1 = *(0x8018ED10)
  lbu   $t2, 3($a0)         t2 = *(a0 + 3)
  mflo  $t0                 t0 = tmp
  addiu $v1, $v1, 1         v1++
  addu  $t1, $v1, $t0       t1 = v1 + t0
  multu $t3, $t4            tmp = t3 * t4                      mult2 = (a0[1] + 1) * 3
  addiu $t4, $v0, 4         t4 = v0 + 4
  addiu $t3, $t2, 1         t3 = t2 + 1
  addu  $v1, $t1, $v0       v1 = t1 + v0
  mflo  $t5                 t5 = tmp
  addu  $t6, $v1, $t5       t6 = v1 + t5
  addu  $v1, $t6, $v0       v1 = t6 + v0
  multu $t8, $t9            tmp = t8 * t9                      mult3 = (a0[2] + 1) * 4
  addiu $v1, $v1, 1         v1++
  mflo  $t0                 t0 = tmp
  addu  $t1, $v1, $t0       t1 = v1 + t0
  addu  $v1, $t1, $v0       v1 = t1 + v0
  multu $t3, $t4            tmp = t3 * t4                      mult4 = (a0[3] + 1) * 5
  addiu $v1, $v1, 2         v1 += 2
  mflo  $t5                 t5 = tmp
  addu  $t6, $v1, $t5       t6 = v1 + t5
  addu  $v1, $t6, $v0       v1 = t6 + v0
  addiu $v1, $v1, 3         v1 += 3
  bgez  $v1, .Lproc_800B492C_AC
  andi  $v0, $v1, 0xff      v0 = v1 & 0xFF                  v0 = (*(EEPROM_BASE + 0x180) + 1 + mult1 + 1 + mult2 + 2 + mult3 + 3 + mult4 + 4) & 0xFF
  beqz  $v0, .Lproc_800B492C_AC if (v1 < 0) {
  nop   
  addiu $v0, $v0, -0x100    v0 = v0 - 0x100
.Lproc_800B492C_AC:             }
  andi  $t7, $v0, 0xff      t7 = v0 & 0xFF
  jr    $ra
  move  $v0, $t7            v0 = t7
# end proc_800B492C

proc_800B49E4:
  lui   $v1, 0x8019
  lbu   $v1, -0x12ea($v1)
  addiu $v1, $v1, 0x5a
  bgez  $v1, .Lproc_800B49E4_20
  andi  $v0, $v1, 0xff
  beqz  $v0, .Lproc_800B49E4_20
  nop   
  addiu $v0, $v0, -0x100
.Lproc_800B49E4_20:
  andi  $t6, $v0, 0xff
  jr    $ra
  move  $v0, $t6
# end proc_800B49E4

---------------------
0x1BE-0x1BF / 1F6-1F7
---------------------

// eeprom: base of EEPROM data
// offset: offset in eeprom to checksum (either 0x188 or 0x1C0)
void Checksum1BEand1F6(unsigned char eeprom[], int offset)
{
  int checksum = 0;
  int blockOffset = offset;
  for (int block = 0; block < 3; block++) {
     int loopOffset = blockOffset + 1;
     checksum += (eeprom[blockOffset] + 1) * (block + 1);
     for (int byteOff = 1; byteOff < 0x11; byteOff += 0x4) {
        int mult2 = (eeprom[loopOffset] + 1) * (block + 1);
        checksum += mult2 + byteOff;
        int mult3 = (eeprom[loopOffset + 1] + 1) * (block + 1);
        checksum += mult3 + byteOff + 1;
        int mult4 = (eeprom[loopOffset + 2] + 1) * (block + 1);
        checksum += mult4 + byteOff + 2;
        int mult5 = (eeprom[loopOffset + 3] + 1) * (block + 1);
        checksum += mult5 + byteOff + 3;
        loopOffset += 4;
     }
     blockOffset += 0x11;
  }
  eeprom[offset + 0x36] = (unsigned char)(checksum & 0xFF);
  eeprom[offset + 0x37] = (unsigned char)((data[offset + 0x36] + 0x5A) & 0xFF);
}

/* 0B6334 800B5734 A2420036 */  sb    $v0, 0x36($s2)
S2 = 8018ED18 (EEPROM[0x188])

proc_800B578C:
  sll   $t6, $a0, 3                t6 = a0 << 3
  subu  $t6, $t6, $a0              t6 -= a0
  sll   $t6, $t6, 3                t6 <<= 3                offset = (a0 * 56)
  lui   $t8, 0x8019
  addiu $t8, $t8, -0x1470          t8 = EEPROM_BASE        //
  addiu $t7, $t6, 0x188            t7 = t6 + 0x188         //
  addu  $a2, $t7, $t8              a2 = t7 + t8            cur_off = offset + 0x188 + EEPROM_BASE
  move  $v1, $zero                 v1 = 0                  checksum = 0
  move  $t0, $a2                   t0 = a2                 rec_off = cur_off
  move  $v0, $zero                 v0 = 0                  record = 0
  addiu $t2, $zero, 3              t2 = 3                  record_count = 3
  addiu $t1, $zero, 0x11           t1 = 0x11               record_length = 0x11
.Lproc_800B578C_30:                do {                    do {
  lbu   $t9, ($t0)                   t9 = t0[0]              //
  addiu $a1, $v0, 1                  a1 = v0 + 1             //
  addiu $a3, $a2, 1                  a3 = a2 + 1             loop_off = cur_off + 1
  addiu $t3, $t9, 1                  t3 = t9 + 1             //
  multu $t3, $a1                     mult1 = t3 * a1         //
  addiu $a2, $a2, 0x11               a2 += 0x11              cur_off += 0x11
  move  $v0, $a1                     v0 = a1                 //
  addiu $a0, $zero, 1                a0 = 1                  byte_off = 1
  mflo  $t4                          t4 = mult1              //
  addu  $v1, $v1, $t4                v1 += t4                checksum += (rec_off[0] + 1) * (record + 1)
  nop                                                        record++
.Lproc_800B578C_5C:                  do {                    do {
  lbu   $t5, ($a3)                     t5 = a3[0]              //
  lbu   $t9, 1($a3)                    t9 = a3[1]              //
  addiu $a3, $a3, 4                    a3 += 4                 // ?
  addiu $t6, $t5, 1                    t6 = t5 + 1             //
  multu $t6, $a1                       mult2 = t6 * a1         mult2 = (loop_off[0] + 1) * record
  addiu $t3, $t9, 1                    t3 = t9 + 1             //
  lbu   $t6, -2($a3)                   t6 = a3[-2]             //
  mflo  $t7                            t7 = mult2              //
  addu  $t8, $v1, $t7                  t8 = v1 + t7            //
  addiu $t7, $t6, 1                    t7 = t6 + 1             //
  multu $t3, $a1                       mult3 = t3 * a1         mult3 = (loop_off[1] + 1) * record
  lbu   $t3, -1($a3)                   t3 = a3[-1]             //
  addu  $v1, $t8, $a0                  v1 = t8 + a0            checksum += mult2 + byte_off
  mflo  $t4                            t4 = mult3              //
  addu  $t5, $v1, $t4                  t5 = v1 + t4            //
  addiu $t4, $t3, 1                    t4 = t3 + 1             //
  multu $t7, $a1                       mult4 = t7 * a1         mult4 = (loop_off[2] + 1) * record
  addu  $v1, $t5, $a0                  v1 = t5 + a0            //
  addiu $v1, $v1, 1                    v1++                    checksum += mult3 + byte_off + 1
  mflo  $t8                            t8 = mult4              //
  addu  $t9, $v1, $t8                  t9 = v1 + t8            //
  addu  $v1, $t9, $a0                  v1 = t9 + a0            //
  multu $t4, $a1                       mult5 = t4 * a1         mult5 = (loop_off[3] + 1) * record
  addiu $v1, $v1, 2                    v1 += 2                 checksum += mult4 + byte_off + 2
  mflo  $t5                            t5 = mult5              //
  addu  $t6, $v1, $t5                  t6 = v1 + t5            //
  addu  $v1, $t6, $a0                  v1 = t6 + a0            //
  addiu $a0, $a0, 4                    a0 += 4                 byte_off += 4
  bne   $a0, $t1, .Lproc_800B578C_5C   v1 += 3                 checksum += mult5 + byte_off + 3
                                                               loop_off += 4
  addiu $v1, $v1, 3                  } while (a0 != t1)      } while (byte_off != record_length)
  bne   $a1, $t2, .Lproc_800B578C_30 t0 += 0x11              rec_off += 0x11
  addiu $t0, $t0, 0x11             } while (a1 != t2)      } while (record != record_count)
  bgez  $v1, .Lproc_800B578C_F0
  andi  $v0, $v1, 0xff             v0 = v1 & 0xFF
  beqz  $v0, .Lproc_800B578C_F0    if (v1 < 0 || v0 != 0) {
  nop   
  addiu $v0, $v0, -0x100             v0 -= 0x100
.Lproc_800B578C_F0:                }
  andi  $t7, $v0, 0xff             t7 = v0 & 0xFF
  jr    $ra
  move  $v0, $t7                   v0 = t7
# end proc_800B578C